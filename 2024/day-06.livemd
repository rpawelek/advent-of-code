# Advent of Code 2024 - Day 06

```elixir
Mix.install([{:kino, github: "livebook-dev/kino"}])

kino_input = Kino.Input.textarea("Please paste your input file: ")
```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = Kino.Input.read(kino_input)

grid = 
  input
  |> String.split("\n", trim: true)
  |> Enum.with_index()
  |> Enum.flat_map(fn {row, y} ->
    row
    |> String.graphemes()
    |> Enum.with_index()
    |> Enum.map(fn {char, x} -> {{x, y}, char} end)
  end)
  |> Enum.into(%{})

max_x = grid |> Map.keys() |> Enum.map(&elem(&1, 0)) |> Enum.max()
max_y = grid |> Map.keys() |> Enum.map(&elem(&1, 1)) |> Enum.max()

directions = [:up, :right, :down, :left]

{{guard_x, guard_y}, initial_direction} =
  grid
  |> Enum.find(fn {_, char} -> char in ["^", ">", "v", "<"] end)
  |> then(fn {{x, y}, dir} ->
    direction =
      case dir do
        "^" -> :up
        ">" -> :right
        "<" -> :left
        "v" -> :down
      end

    {{x, y}, direction}
  end)

Enum.reduce_while(Stream.iterate(nil, & &1), {[], {guard_x, guard_y}, initial_direction}, fn _, {visited_positions, {x, y}, direction} ->  
  if (x < 0 || y < 0) || (x > max_x || y > max_y) do
    {:halt, visited_positions}
  else    
    visited_positions = [{x, y} | visited_positions]
    
    next_position =
      case direction do
        :up    -> {x, y - 1}
        :right -> {x + 1, y}
        :left  -> {x - 1, y}
        :down  -> {x, y + 1}
      end
    
    if Map.get(grid, next_position, ".") == "#" do
      new_direction = Enum.at(directions, rem(Enum.find_index(directions, &(&1 == direction)) + 1, 4))
      {:cont, {visited_positions, {x, y}, new_direction}}
    else
      {:cont, {visited_positions, next_position, direction}}
    end
  end
end)
|> Enum.uniq()
|> Enum.count()
```
